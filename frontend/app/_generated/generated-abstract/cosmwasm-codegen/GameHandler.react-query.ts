/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@abstract-money/cli/cosmjs";
import { StdFee } from "@abstract-money/cli/cosmjs";
import { AccountTrace, TruncatedChainId, Uint128, InstantiateMsg, AccountId, FixedMetadata, Coin, ExecuteMsg, Vec2, QueryMsg, MigrateMsg, ConfigResponse } from "./GameHandler.types";
import { GameHandlerAppQueryClient, GameHandlerAppClient } from "./GameHandler.client";
export const gameHandlerQueryKeys = {
  contract: ([{
    contract: "gameHandler"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...gameHandlerQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...gameHandlerQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const)
};
export interface GameHandlerReactQuery<TResponse, TData = TResponse> {
  client: GameHandlerAppQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface GameHandlerConfigQuery<TData> extends GameHandlerReactQuery<ConfigResponse, TData> {}
export function useGameHandlerConfigQuery<TData = ConfigResponse>({
  client,
  options
}: GameHandlerConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(gameHandlerQueryKeys.config(client?._moduleAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface GameHandlerMovePlayerMutation {
  client: GameHandlerAppClient;
  msg: {
    positions: Vec2[];
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useGameHandlerMovePlayerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, GameHandlerMovePlayerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, GameHandlerMovePlayerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.movePlayer(msg, fee, memo, funds), options);
}
export interface GameHandlerCreateAccountMutation {
  client: GameHandlerAppClient;
  msg: {
    cityMapIndex?: number;
    receiver?: AccountId;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useGameHandlerCreateAccountMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, GameHandlerCreateAccountMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, GameHandlerCreateAccountMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createAccount(msg, fee, memo, funds), options);
}