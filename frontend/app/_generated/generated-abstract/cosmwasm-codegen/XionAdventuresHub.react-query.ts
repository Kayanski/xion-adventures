/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@abstract-money/cli/cosmjs";
import { StdFee, Coin } from "@abstract-money/cli/cosmjs";
import { AccountTrace, TruncatedChainId, InstantiateMsg, AccountId, ExecuteMsg, PlayerLocation, XionAdventuresExtensionMsg, Vec2, QueryMsg, MigrateMsg, ConfigResponse, NextTokenIdResponse } from "./XionAdventuresHub.types";
import { XionAdventuresHubAppQueryClient, XionAdventuresHubAppClient } from "./XionAdventuresHub.client";
export const xionAdventuresHubQueryKeys = {
  contract: ([{
    contract: "xionAdventuresHub"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...xionAdventuresHubQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...xionAdventuresHubQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  nextTokenId: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...xionAdventuresHubQueryKeys.address(contractAddress)[0],
    method: "next_token_id",
    args
  }] as const)
};
export interface XionAdventuresHubReactQuery<TResponse, TData = TResponse> {
  client: XionAdventuresHubAppQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface XionAdventuresHubNextTokenIdQuery<TData> extends XionAdventuresHubReactQuery<NextTokenIdResponse, TData> {}
export function useXionAdventuresHubNextTokenIdQuery<TData = NextTokenIdResponse>({
  client,
  options
}: XionAdventuresHubNextTokenIdQuery<TData>) {
  return useQuery<NextTokenIdResponse, Error, TData>(xionAdventuresHubQueryKeys.nextTokenId(client?._moduleAddress), () => client ? client.nextTokenId() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface XionAdventuresHubConfigQuery<TData> extends XionAdventuresHubReactQuery<ConfigResponse, TData> {}
export function useXionAdventuresHubConfigQuery<TData = ConfigResponse>({
  client,
  options
}: XionAdventuresHubConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(xionAdventuresHubQueryKeys.config(client?._moduleAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface XionAdventuresHubModifyMetadataMutation {
  client: XionAdventuresHubAppClient;
  msg: {
    metadata: XionAdventuresExtensionMsg;
    moduleId: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useXionAdventuresHubModifyMetadataMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, XionAdventuresHubModifyMetadataMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, XionAdventuresHubModifyMetadataMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.modifyMetadata(msg, fee, memo, funds), options);
}
export interface XionAdventuresHubMintMutation {
  client: XionAdventuresHubAppClient;
  msg: {
    metadata: XionAdventuresExtensionMsg;
    moduleId: string;
    recipient?: AccountId;
    tokenUri: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useXionAdventuresHubMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, XionAdventuresHubMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, XionAdventuresHubMintMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(msg, fee, memo, funds), options);
}
export interface XionAdventuresHubIbcTransferMutation {
  client: XionAdventuresHubAppClient;
  msg: {
    recipientChain: TruncatedChainId;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useXionAdventuresHubIbcTransferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, XionAdventuresHubIbcTransferMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, XionAdventuresHubIbcTransferMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.ibcTransfer(msg, fee, memo, funds), options);
}