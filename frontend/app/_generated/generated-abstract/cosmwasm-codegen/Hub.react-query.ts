/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@abstract-money/cli/cosmjs";
import { StdFee, Coin } from "@abstract-money/cli/cosmjs";
import { AccountTrace, TruncatedChainId, InstantiateMsg, AccountId, ExecuteMsg, PlayerLocation, XionAdventuresExtensionMsg, Vec2, QueryMsg, MigrateMsg, ConfigResponse, Binary, MapResponse, MapOutput, NextTokenIdResponse, XionAdventuresExtension } from "./Hub.types";
import { HubAppQueryClient, HubAppClient } from "./Hub.client";
export const hubQueryKeys = {
  contract: ([{
    contract: "hub"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...hubQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...hubQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  nextTokenId: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...hubQueryKeys.address(contractAddress)[0],
    method: "next_token_id",
    args
  }] as const),
  map: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...hubQueryKeys.address(contractAddress)[0],
    method: "map",
    args
  }] as const),
  playerMetadata: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...hubQueryKeys.address(contractAddress)[0],
    method: "player_metadata",
    args
  }] as const)
};
export interface HubReactQuery<TResponse, TData = TResponse> {
  client: HubAppQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface HubPlayerMetadataQuery<TData> extends HubReactQuery<XionAdventuresExtension, TData> {
  args: undefined | {
    tokenId: string;
  };
}
export function useHubPlayerMetadataQuery<TData = XionAdventuresExtension>({
  client,
  args,
  options
}: HubPlayerMetadataQuery<TData>) {
  return useQuery<XionAdventuresExtension, Error, TData>(hubQueryKeys.playerMetadata(client?._moduleAddress, args), () => client && args ? client.playerMetadata({
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client or args")), {
    ...options, enabled: !!args && !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface HubMapQuery<TData> extends HubReactQuery<MapResponse, TData> { }
export function useHubMapQuery<TData = MapResponse>({
  client,
  options
}: HubMapQuery<TData>) {
  return useQuery<MapResponse, Error, TData>(hubQueryKeys.map(client?._moduleAddress), () => client ? client.map() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface HubNextTokenIdQuery<TData> extends HubReactQuery<NextTokenIdResponse, TData> { }
export function useHubNextTokenIdQuery<TData = NextTokenIdResponse>({
  client,
  options
}: HubNextTokenIdQuery<TData>) {
  return useQuery<NextTokenIdResponse, Error, TData>(hubQueryKeys.nextTokenId(client?._moduleAddress), () => client ? client.nextTokenId() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface HubConfigQuery<TData> extends HubReactQuery<ConfigResponse, TData> { }
export function useHubConfigQuery<TData = ConfigResponse>({
  client,
  options
}: HubConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(hubQueryKeys.config(client?._moduleAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface HubModifyMetadataMutation {
  client: HubAppClient;
  msg: {
    metadata: XionAdventuresExtensionMsg;
    moduleId: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useHubModifyMetadataMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, HubModifyMetadataMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, HubModifyMetadataMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.modifyMetadata(msg, fee, memo, funds), options);
}
export interface HubMintMutation {
  client: HubAppClient;
  msg: {
    metadata: XionAdventuresExtensionMsg;
    moduleId: string;
    recipient?: AccountId;
    tokenUri: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useHubMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, HubMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, HubMintMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(msg, fee, memo, funds), options);
}
export interface HubIbcTransferMutation {
  client: HubAppClient;
  msg: {
    recipientChain: TruncatedChainId;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useHubIbcTransferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, HubIbcTransferMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, HubIbcTransferMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.ibcTransfer(msg, fee, memo, funds), options);
}