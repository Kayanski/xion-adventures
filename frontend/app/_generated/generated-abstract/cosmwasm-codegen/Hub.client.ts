/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { CamelCasedProperties } from "type-fest";
import { SigningCosmWasmClient, ExecuteResult } from "@abstract-money/cli/cosmjs";
import { AccountPublicClient, AccountWalletClient, AppExecuteMsg, AppExecuteMsgFactory, AdapterExecuteMsg, AdapterExecuteMsgFactory } from "@abstract-money/core";
import { StdFee, Coin } from "@abstract-money/cli/cosmjs";
import { AccountTrace, TruncatedChainId, InstantiateMsg, AccountId, ExecuteMsg, PlayerLocation, XionAdventuresExtensionMsg, Vec2, QueryMsg, MigrateMsg, ConfigResponse, Binary, MapResponse, MapOutput, NextTokenIdResponse, XionAdventuresExtension } from "./Hub.types";
import { HubQueryMsgBuilder, HubExecuteMsgBuilder } from "./Hub.message-builder";
export interface IHubAppQueryClient {
  moduleId: string;
  accountPublicClient: AccountPublicClient;
  _moduleAddress: string | undefined;
  config: () => Promise<ConfigResponse>;
  nextTokenId: () => Promise<NextTokenIdResponse>;
  map: () => Promise<MapResponse>;
  playerMetadata: (params: CamelCasedProperties<Extract<QueryMsg, {
    player_metadata: unknown;
  }>["player_metadata"]>) => Promise<XionAdventuresExtension>;
  getAddress: () => Promise<string>;
}
export class HubAppQueryClient implements IHubAppQueryClient {
  accountPublicClient: AccountPublicClient;
  moduleId: string;
  _moduleAddress: string | undefined;

  constructor({
    accountPublicClient,
    moduleId
  }: {
    accountPublicClient: AccountPublicClient;
    moduleId: string;
  }) {
    this.accountPublicClient = accountPublicClient;
    this.moduleId = moduleId;
    this.config = this.config.bind(this);
    this.nextTokenId = this.nextTokenId.bind(this);
    this.map = this.map.bind(this);
    this.playerMetadata = this.playerMetadata.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this._query(HubQueryMsgBuilder.config());
  };
  nextTokenId = async (): Promise<NextTokenIdResponse> => {
    return this._query(HubQueryMsgBuilder.nextTokenId());
  };
  map = async (): Promise<MapResponse> => {
    return this._query(HubQueryMsgBuilder.map());
  };
  playerMetadata = async (params: CamelCasedProperties<Extract<QueryMsg, {
    player_metadata: unknown;
  }>["player_metadata"]>): Promise<XionAdventuresExtension> => {
    return this._query(HubQueryMsgBuilder.playerMetadata(params));
  };
  getAddress = async (): Promise<string> => {
    if (!this._moduleAddress) {
      const address = await this.accountPublicClient.getModuleAddress({
        id: this.moduleId
      });

      if (address === null) {
        throw new Error(`Module ${this.moduleId} not installed`);
      }

      this._moduleAddress = address;
    }

    return this._moduleAddress!;
  };
  _query = async (queryMsg: QueryMsg): Promise<any> => {
    return this.accountPublicClient.queryModule({
      moduleId: this.moduleId,
      moduleType: "adapter",
      queryMsg
    });
  };
}
export interface IHubAppClient extends IHubAppQueryClient {
  accountWalletClient: AccountWalletClient;
  ibcTransfer: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    ibc_transfer: unknown;
  }>["ibc_transfer"]>, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  mint: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    mint: unknown;
  }>["mint"]>, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  modifyMetadata: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    modify_metadata: unknown;
  }>["modify_metadata"]>, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class HubAppClient extends HubAppQueryClient implements IHubAppClient {
  accountWalletClient: AccountWalletClient;

  constructor({
    accountPublicClient,
    accountWalletClient,
    moduleId
  }: {
    accountPublicClient: AccountPublicClient;
    accountWalletClient: AccountWalletClient;
    moduleId: string;
  }) {
    super({
      accountPublicClient,
      moduleId
    });
    this.accountWalletClient = accountWalletClient;
    this.ibcTransfer = this.ibcTransfer.bind(this);
    this.mint = this.mint.bind(this);
    this.modifyMetadata = this.modifyMetadata.bind(this);
  }

  ibcTransfer = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    ibc_transfer: unknown;
  }>["ibc_transfer"]>, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(HubExecuteMsgBuilder.ibcTransfer(params), fee_, memo_, funds_);
  };
  mint = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    mint: unknown;
  }>["mint"]>, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(HubExecuteMsgBuilder.mint(params), fee_, memo_, funds_);
  };
  modifyMetadata = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    modify_metadata: unknown;
  }>["modify_metadata"]>, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(HubExecuteMsgBuilder.modifyMetadata(params), fee_, memo_, funds_);
  };
  _execute = async (msg: ExecuteMsg, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    const signingCwClient = await this.accountWalletClient.getSigningCosmWasmClient();
    const sender = await this.accountWalletClient.getSenderAddress();
    const accountAddress = await this.accountPublicClient.getAccountAddress();
    const moduleMsg: AdapterExecuteMsg<ExecuteMsg> = AdapterExecuteMsgFactory.executeAdapter({
      request: msg,
      accountAddress
    });
    return await signingCwClient.execute(sender, await this.getAddress(), moduleMsg, fee_, memo_, funds_);
  };
}