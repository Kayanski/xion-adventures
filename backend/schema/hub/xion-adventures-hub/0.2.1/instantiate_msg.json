{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "base",
    "module"
  ],
  "properties": {
    "base": {
      "description": "base instantiate information",
      "allOf": [
        {
          "$ref": "#/definitions/BaseInstantiateMsg"
        }
      ]
    },
    "module": {
      "description": "custom instantiate msg",
      "allOf": [
        {
          "$ref": "#/definitions/HubInstantiateMsg"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AccountId": {
      "description": "Unique identifier for an account. On each chain this is unique.",
      "type": "object",
      "required": [
        "seq",
        "trace"
      ],
      "properties": {
        "seq": {
          "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "trace": {
          "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
          "allOf": [
            {
              "$ref": "#/definitions/AccountTrace"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AccountTrace": {
      "description": "The identifier of chain that triggered the account creation",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "local"
          ]
        },
        {
          "type": "object",
          "required": [
            "remote"
          ],
          "properties": {
            "remote": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TruncatedChainId"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BaseInstantiateMsg": {
      "description": "Used by Abstract to instantiate the contract The contract is then registered on the registry contract using [`crate::registry::ExecuteMsg::ProposeModules`].",
      "type": "object",
      "required": [
        "registry_address"
      ],
      "properties": {
        "registry_address": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "HubInstantiateMsg": {
      "description": "App instantiate message",
      "type": "object",
      "required": [
        "admin_account",
        "nft_code_id"
      ],
      "properties": {
        "admin_account": {
          "$ref": "#/definitions/AccountId"
        },
        "nft_code_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "TruncatedChainId": {
      "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
      "type": "string"
    }
  }
}
