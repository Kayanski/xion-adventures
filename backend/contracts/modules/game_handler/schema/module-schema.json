{
  "contract_name": "module-schema",
  "contract_version": "0.25.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "App instantiate message",
    "type": "object",
    "required": [
      "admin_account",
      "metadata_base",
      "mint_cost",
      "mint_limit",
      "token_uri_base"
    ],
    "properties": {
      "admin_account": {
        "$ref": "#/definitions/AccountId"
      },
      "metadata_base": {
        "$ref": "#/definitions/FixedMetadata"
      },
      "mint_cost": {
        "$ref": "#/definitions/Coin"
      },
      "mint_limit": {
        "type": "integer",
        "format": "uint",
        "minimum": 0.0
      },
      "token_uri_base": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AccountId": {
        "description": "Unique identifier for an account. On each chain this is unique.",
        "type": "object",
        "required": [
          "seq",
          "trace"
        ],
        "properties": {
          "seq": {
            "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "trace": {
            "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
            "allOf": [
              {
                "$ref": "#/definitions/AccountTrace"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AccountTrace": {
        "description": "The identifier of chain that triggered the account creation",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "local"
            ]
          },
          {
            "type": "object",
            "required": [
              "remote"
            ],
            "properties": {
              "remote": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TruncatedChainId"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "FixedMetadata": {
        "type": "object",
        "additionalProperties": false
      },
      "TruncatedChainId": {
        "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "App execute messages",
    "oneOf": [
      {
        "description": "Create a new account on this chain. This actually mints a new NFT that you can play with. It's minted to the receiver (or the sender of the message)",
        "type": "object",
        "required": [
          "create_account"
        ],
        "properties": {
          "create_account": {
            "type": "object",
            "properties": {
              "city_map_index": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "receiver": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AccountId"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This is used to move a player around This endpoint accepts the trajectory of a player and verifies it's a possible trajectory according to the map stored in the Hub contract",
        "type": "object",
        "required": [
          "move_player"
        ],
        "properties": {
          "move_player": {
            "type": "object",
            "required": [
              "positions",
              "token_id"
            ],
            "properties": {
              "positions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Vec2"
                }
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AccountId": {
        "description": "Unique identifier for an account. On each chain this is unique.",
        "type": "object",
        "required": [
          "seq",
          "trace"
        ],
        "properties": {
          "seq": {
            "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "trace": {
            "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
            "allOf": [
              {
                "$ref": "#/definitions/AccountTrace"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AccountTrace": {
        "description": "The identifier of chain that triggered the account creation",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "local"
            ]
          },
          {
            "type": "object",
            "required": [
              "remote"
            ],
            "properties": {
              "remote": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TruncatedChainId"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TruncatedChainId": {
        "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
        "type": "string"
      },
      "Vec2": {
        "type": "object",
        "required": [
          "x",
          "y"
        ],
        "properties": {
          "x": {
            "type": "integer",
            "format": "int64"
          },
          "y": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "App query messages",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "admin_account",
        "metadata_base",
        "mint_cost",
        "mint_limit",
        "token_uri_base"
      ],
      "properties": {
        "admin_account": {
          "$ref": "#/definitions/AccountId"
        },
        "metadata_base": {
          "$ref": "#/definitions/FixedMetadata"
        },
        "mint_cost": {
          "$ref": "#/definitions/Coin"
        },
        "mint_limit": {
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "token_uri_base": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AccountId": {
          "description": "Unique identifier for an account. On each chain this is unique.",
          "type": "object",
          "required": [
            "seq",
            "trace"
          ],
          "properties": {
            "seq": {
              "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "trace": {
              "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
              "allOf": [
                {
                  "$ref": "#/definitions/AccountTrace"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AccountTrace": {
          "description": "The identifier of chain that triggered the account creation",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "local"
              ]
            },
            {
              "type": "object",
              "required": [
                "remote"
              ],
              "properties": {
                "remote": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TruncatedChainId"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "FixedMetadata": {
          "type": "object",
          "additionalProperties": false
        },
        "TruncatedChainId": {
          "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
